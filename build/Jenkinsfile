pipeline {
    
    agent any
    
    parameters {
        string( name: 'semver', defaultValue: '0.0.0',
            description: 'the resulting semver version number after running gitversion on the source at GitHub')
        string( name: 'branchname', defaultValue: 'master',
            description: 'the actual branch name that triggered the build as precurred from gitversion')
    }

    environment {
        BRANCH_NAME="${params.branchname}"
        RELEASE="${params.semver}"
    }

    stages {

        stage("Initialization") {
            steps {
                buildName "${params.semver}"
                buildDescription "${params.branchname}"
            }
        }

        stage("Build") {
            steps {
                sh "docker image build --no-cache --rm -f ./build/Dockerfile -t semverservice --build-arg SONAR_PROJECT_VERSION=${params.semver} ."
            }
        }

        stage('Test-Image'){
            steps {
                script {
                    try {                           
                        def status = 0
                        status = sh(returnStdout: true, script: "container-structure-test test --image 'semverservice' --config './test/DockerTest/unit-test.yaml' --verbosity 'debug' --json | jq .Fail") as Integer
                        echo "$status"
                        if (status != 0) {                            
                            error 'Image Test has failed'
                        }

                    } catch (err) {
                        error "Test-Image ERROR: The execution of the container structure tests failed, see the log for details."
                        echo err
                    } 
                }
            }
        }

        stage('Publish') {
            steps {
                sh 'chmod +x ./build/ci/publish.sh'
                sh "./build/ci/publish.sh ${params.semver}"
            }
        }

        stage('Deploy') {
            steps {
                sh "docker-compose -f ./build/docker-compose.yml up -d"
            }
        }
    }


}